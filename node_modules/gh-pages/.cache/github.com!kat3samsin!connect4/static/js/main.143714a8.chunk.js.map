{"version":3,"sources":["actions/GameActions.js","components/Cell.js","components/Row.js","components/Board.js","components/Game.js","App.js","reducers/GameReducer.js","store.js","index.js"],"names":["initialize","type","rows","cols","cellsToWin","movePlayer","state","action","board","updateBoard","player","col","row","length","checkWinner","winner","hasWinner","getDiagonal","bottomToTop","maxLength","Math","max","diagonal","i","d","j","k","push","checkHorizontal","p1Winner","Array","fill","join","p2Winner","some","r","match","boardT","map","idx","checkVertical","Cell","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","_args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleClick","args","props","move","inherits","createClass","key","value","react_default","a","createElement","className","onClick","bind","Component","connect","dispatch","Row","val","components_Cell","Board","Row_Row","Game","init","initializeBoard","components_Board","App","components_Game","initialState","GameReducer","undefined","initBoard","assign","store","createStore","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.143714a8.chunk.js","sourcesContent":["export const initialize = () => {\r\n  return {\r\n    type: 'INIT',\r\n    rows: 6,\r\n    cols: 7,\r\n    cellsToWin: 4\r\n  };\r\n};\r\n\r\nexport const movePlayer = state => {\r\n  let action = {};\r\n  action.type = 'MOVE';\r\n  action.board = updateBoard(state.board, state.player, state.rows, state.col);\r\n  action.player = state.player === 1 ? 2 : 1;\r\n  return action;\r\n};\r\n\r\nexport const updateBoard = (board, player, rows, col) => {\r\n  for (let row = rows - 1; board.length === rows && row >= 0; row--) {\r\n    if (!board[row][col]) {\r\n      board[row][col] = player;\r\n      break;\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const checkWinner = (state) => {\r\n  let winner = hasWinner(state.board, state.cellsToWin);\r\n  if (winner) {\r\n    return {\r\n      type: 'ENDGAME',\r\n      winner: winner\r\n    };\r\n  } else {\r\n    return {\r\n      type: 'DONOTHING'\r\n    };\r\n  }\r\n};\r\n\r\nexport const hasWinner = (board, cellsToWin) => {\r\n  const checkDiagonal = () => {\r\n    return checkHorizontal(getDiagonal()) ||\r\n           checkHorizontal(getDiagonal(true));\r\n  };\r\n\r\n  const getDiagonal = (bottomToTop) => {\r\n    let row = board.length;\r\n    let col = board[0].length;\r\n    let maxLength = Math.max(row, col);\r\n    let diagonal = [];\r\n\r\n    for (let i = 0; i <= 2 * (maxLength - 1); ++i) {\r\n      let d = [];\r\n      \r\n      for (let j = row - 1; j >= 0; --j) {\r\n        let k = i - (bottomToTop ? row - j : j);\r\n        if (k >= 0 && k < col) {\r\n          d.push(board[j][k]);\r\n        }\r\n      }\r\n\r\n      if (d.length >= cellsToWin) {\r\n        diagonal.push(d);\r\n      }\r\n    }\r\n    return diagonal;\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let winner = 0;\r\n    let boardT = board.map((col, idx) => board.map(row => row[idx]));\r\n    winner = checkHorizontal(boardT);\r\n    return winner;\r\n  };\r\n\r\n  const checkHorizontal = (board) => {\r\n    let winner = 0;\r\n    let p1Winner = Array(cellsToWin)\r\n      .fill('1')\r\n      .join('');\r\n    let p2Winner = Array(cellsToWin)\r\n      .fill('2')\r\n      .join('');\r\n\r\n    board.some(r => {\r\n      let row = r.join('');\r\n      if (row.match(p1Winner)) {\r\n        winner = 1;\r\n        return true;\r\n      } else if (row.match(p2Winner)) {\r\n        winner = 2;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    return winner;\r\n  };\r\n\r\n  return checkHorizontal(board) || \r\n         checkVertical() || \r\n         checkDiagonal();\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { movePlayer, checkWinner } from '../actions/GameActions';\r\n\r\nexport class Cell extends Component {\r\n  handleClick = args => {\r\n    if (!this.props.winner) {\r\n      this.props.move(args);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <td\r\n        className={\r\n          this.props.player === 1 ? 'board-td p1-td' : 'board-td p2-td'\r\n        }\r\n      >\r\n        <div\r\n          className={\r\n            this.props.value === 1\r\n              ? 'player1'\r\n              : this.props.value === 2\r\n              ? 'player2'\r\n              : 'init'\r\n          }\r\n          onClick={this.handleClick.bind(this, {\r\n            rows: this.props.rows,\r\n            col: this.props.col,\r\n            player: this.props.player,\r\n            board: this.props.board,\r\n            cellsToWin: this.props.cellsToWin\r\n          })}\r\n        />\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    move: args => {\r\n      dispatch(movePlayer(args));\r\n      dispatch(checkWinner(args));\r\n    }\r\n  };\r\n}\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Cell);\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Row extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        {this.props.row.map((val, idx) => (\r\n          <Cell key={idx} value={val} col={idx} />\r\n        ))}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Row from './Row';\r\n\r\nclass Board extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className=\"board\">\r\n          <tbody>\r\n            {this.props.board.map((row, idx) => (\r\n              <Row key={idx} row={row} />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Board from './Board';\r\nimport { initialize } from '../actions/GameActions';\r\n\r\nexport class Game extends Component {\r\n  initializeBoard() {\r\n    this.props.init();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"btn\" onClick={this.initializeBoard.bind(this)}>\r\n          New Game\r\n        </button>\r\n        {this.props.board.length > 0 ? (\r\n          <div>\r\n            {this.props.winner ? (\r\n              <h2>Game Over! Player {this.props.winner} wins!</h2>\r\n            ) : (\r\n              <h2>Player {this.props.player}</h2>\r\n            )}\r\n            <Board board={this.props.board} />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    init: () => {\r\n      dispatch(initialize());\r\n    }\r\n  };\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Game);\r\n","import React, {Component} from 'react';\r\n\r\nimport Game from './components/Game';\r\n\r\nexport class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <div>\r\n          <h1 className='title'>Connect 4</h1>\r\n          <p>A classic game created using ReactJS<br/>\r\n          First player to connect 4 wins</p>\r\n        </div>\r\n        <Game />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  board: [],\r\n  rows: 6,\r\n  cols: 7,\r\n  player: 1,\r\n  winner: 0,\r\n  cellsToWin: 4\r\n};\r\n\r\nconst GameReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'INIT':\r\n      let board = initBoard(action.rows, action.cols);\r\n      return Object.assign({}, state, {\r\n        board: board,\r\n        rows: action.rows,\r\n        cols: action.cols,\r\n        cellsToWin: action.cellsToWin,\r\n        player: 1,\r\n        winner: 0\r\n      });\r\n    case 'MOVE':\r\n      return Object.assign({}, state, {\r\n        player: action.player,\r\n        board: action.board\r\n      });\r\n    case 'ENDGAME':\r\n      return Object.assign({}, state, {\r\n        winner: action.winner\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default GameReducer;\r\n\r\nexport function initBoard(rows, cols) {\r\n  let board = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let col = Array(cols).fill(0);\r\n    board.push(col);\r\n  }\r\n  return board;\r\n}","import { createStore } from \"redux\";\r\nimport GameReducer from \"./reducers/GameReducer\";\r\n\r\nconst store = createStore(GameReducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}