{"version":3,"sources":["reducers/GameReducer.js","store.js","actions/GameActions.js","components/Cell.js","components/Row.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["initialState","board","rows","cols","player","winner","cellsToWin","GameReducer","state","arguments","length","undefined","action","type","i","col","Array","fill","push","initBoard","Object","assign","store","createStore","initialize","movePlayer","updateBoard","row","checkWinner","hasWinner","getDiagonal","bottomToTop","maxLength","Math","max","diagonal","d","j","k","checkHorizontal","p1Winner","join","p2Winner","some","r","match","boardT","map","idx","checkVertical","Cell","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","_args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleClick","args","props","move","inherits","createClass","key","value","react_default","a","createElement","className","onClick","bind","Component","connect","dispatch","Row","val","components_Cell","Board","init","components_Row","rowCount","Game","initializeBoard","components_Board","App","components_Game","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2c11828f.chunk.js","sourcesContent":["const initialState = {\n  board: [],\n  rows: 6,\n  cols: 7,\n  player: 1,\n  winner: 0,\n  cellsToWin: 4\n};\n\nconst GameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INIT':\n      let board = initBoard(action.rows, action.cols);\n      return Object.assign({}, state, {\n        board: board,\n        rows: action.rows,\n        cols: action.cols,\n        cellsToWin: action.cellsToWin,\n        player: 1,\n        winner: 0\n      });\n    case 'MOVE':\n      return Object.assign({}, state, {\n        player: action.player,\n        board: action.board\n      });\n    case 'ENDGAME':\n      return Object.assign({}, state, {\n        winner: action.winner\n      });\n    default:\n      return state;\n  }\n};\nexport default GameReducer;\n\nexport function initBoard(rows, cols) {\n  let board = [];\n  for (let i = 0; i < rows; i++) {\n    let col = Array(cols).fill(0);\n    board.push(col);\n  }\n  return board;\n}","import { createStore } from \"redux\";\nimport GameReducer from \"./reducers/GameReducer\";\n\nconst store = createStore(GameReducer);\n\nexport default store;","import store from '../store';\n\nexport const initialize = () => {\n  return {\n    type: 'INIT',\n    rows: 6,\n    cols: 7,\n    cellsToWin: 4\n  };\n};\n\nexport const movePlayer = state => {\n  let action = {};\n  action.type = 'MOVE';\n  action.board = updateBoard(state.board, state.player, state.rows, state.col);\n  action.player = state.player === 1 ? 2 : 1;\n  return action;\n};\n\nexport const updateBoard = (board, player, rows, col) => {\n  for (let row = rows - 1; board.length === rows && row >= 0; row--) {\n    if (!board[row][col]) {\n      board[row][col] = player;\n      break;\n    }\n  }\n  return board;\n};\n\nexport const checkWinner = (state) => {\n  let winner = hasWinner(state.board, state.cellsToWin);\n  if (winner) {\n    return {\n      type: 'ENDGAME',\n      winner: winner\n    };\n  } else {\n    return {\n      type: 'DONOTHING'\n    };\n  }\n};\n\nexport const hasWinner = (board, cellsToWin) => {\n  const checkDiagonal = () => {\n    return checkHorizontal(getDiagonal()) ||\n           checkHorizontal(getDiagonal(true));\n  };\n\n  const getDiagonal = (bottomToTop) => {\n    let row = board.length;\n    let col = board[0].length;\n    let maxLength = Math.max(row, col);\n    let diagonal = [];\n\n    for (let i = 0; i <= 2 * (maxLength - 1); ++i) {\n      let d = [];\n      \n      for (let j = row - 1; j >= 0; --j) {\n        let k = i - (bottomToTop ? row - j : j);\n        if (k >= 0 && k < col) {\n          d.push(board[j][k]);\n        }\n      }\n\n      if (d.length >= cellsToWin) {\n        diagonal.push(d);\n      }\n    }\n    return diagonal;\n  };\n\n  const checkVertical = () => {\n    let winner = 0;\n    let boardT = board.map((col, idx) => board.map(row => row[idx]));\n    winner = checkHorizontal(boardT);\n    return winner;\n  };\n\n  const checkHorizontal = (board) => {\n    let winner = 0;\n    let p1Winner = Array(cellsToWin)\n      .fill('1')\n      .join('');\n    let p2Winner = Array(cellsToWin)\n      .fill('2')\n      .join('');\n\n    board.some(r => {\n      let row = r.join('');\n      if (row.match(p1Winner)) {\n        winner = 1;\n        return true;\n      } else if (row.match(p2Winner)) {\n        winner = 2;\n        return true;\n      }\n      return false;\n    });\n    return winner;\n  };\n\n  return checkHorizontal(board) || \n         checkVertical() || \n         checkDiagonal();\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport { movePlayer, checkWinner } from '../actions/GameActions'\n\nexport class Cell extends Component {\n  handleClick = (args) => {\n    if (!this.props.winner) {\n      this.props.move(args);\n    }\n  };\n\n  render() {\n    return (\n      <td className={this.props.player === 1 ? 'board-td p1-td' : 'board-td p2-td'}>\n        <div \n          className={this.props.value === 1 ? 'player1' : \n                    this.props.value === 2 ? 'player2' : 'init'}\n          onClick={this.handleClick.bind(this, {\n            rows: this.props.rows, \n            col: this.props.col,\n            player: this.props.player,\n            board: this.props.board,\n            cellsToWin: this.props.cellsToWin\n          })}>\n        </div>\n      </td>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    move: args => {\n      dispatch(movePlayer(args));\n      dispatch(checkWinner(args));\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Cell from './Cell';\n\nexport class Row extends Component {\n  render() {\n    return (\n      <tr>\n          {this.props.row.map((val, idx) => <Cell key={idx} value={val} col={idx} />)}\n      </tr>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps)(Row);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Row from './Row';\nimport { initialize } from '../actions/GameActions';\n\nexport class Board extends Component {\n  initializeBoard() {\n    this.props.init();\n  }\n\n  render() {\n    return (<div>\n        <table className='board'>\n          <tbody>\n            {this.props.board.map((row, idx) => <Row key={idx} row={row} rowCount={idx} />)}\n          </tbody>            \n        </table>\n      </div>);\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    init: () => {\n      dispatch(initialize())\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Board from './Board';\nimport {initialize} from '../actions/GameActions';\n\nexport class Game extends Component {\n  initializeBoard() {\n    this.props.init();\n  }\n  render() {\n    return (\n      <div>\n        <button className='btn' onClick={this.initializeBoard.bind(this)}>New Game</button>\n        {this.props.board.length > 0? \n          <div>\n            {this.props.winner ? \n              <h2>Game Over! Player {this.props.winner} wins!</h2> :\n              <h2>Player {this.props.player}</h2>}\n            <Board />\n          </div> : null}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    init: () => {\n      dispatch(initialize())\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, {Component} from 'react';\n\nimport Game from './components/Game';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <div>\n          <h1 className='title'>Connect 4</h1>\n          <p>A classic game created using ReactJS<br/>\n          First player to connect 4 wins</p>\n        </div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}