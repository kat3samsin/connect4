{"version":3,"sources":["reducers/GameReducer.js","store.js","actions/GameActions.js","components/Cell.js","components/Row.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["initialState","board","rows","cols","player","winner","cellsToWin","GameReducer","state","arguments","length","undefined","action","type","i","col","Array","fill","push","initBoard","Object","assign","store","createStore","initialize","movePlayer","position","getState","updateBoard","checkWinner","hasWinner","row","checkHorizontal","checkVertical","checkDiagonal","getDiagonal","bottomToTop","maxLength","Math","max","diagonal","d","j","k","p1Winner","join","p2Winner","some","r","match","boardT","map","idx","Cell","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","_args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleClick","args","props","move","inherits","createClass","key","value","react_default","a","createElement","className","onClick","bind","Component","connect","dispatch","pos","Row","val","components_Cell","rowCount","Board","init","components_Row","Game","initializeBoard","components_Board","App","components_Game","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e243a780.chunk.js","sourcesContent":["const initialState = {\n  board: [],\n  rows: 6,\n  cols: 7,\n  player: 1,\n  winner: 0,\n  cellsToWin: 4\n};\n\nconst GameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INIT':\n      let board = initBoard(action.rows, action.cols);\n      return Object.assign({}, state, {\n        board: board,\n        rows: action.rows,\n        cols: action.cols,\n        cellsToWin: action.cellsToWin,\n        player: 1,\n        winner: 0\n      });\n    case 'MOVE':\n      return Object.assign({}, state, {\n        player: action.player,\n        board: action.board\n      });\n    case 'ENDGAME':\n      return Object.assign({}, state, {\n        winner: action.winner\n      });\n    default:\n      return state;\n  }\n};\nexport default GameReducer;\n\nexport function initBoard(rows, cols) {\n  let board = [];\n  for (let i = 0; i < rows; i++) {\n    let col = Array(cols).fill(0);\n    board.push(col);\n  }\n  return board;\n}","import { createStore } from \"redux\";\nimport GameReducer from \"./reducers/GameReducer\";\n\nconst store = createStore(GameReducer);\n\nexport default store;","import store from '../store';\n\nexport const initialize = () => {\n  return {\n    type: \"INIT\",\n    rows: 6, \n    cols: 7,\n    cellsToWin: 4\n  };\n};\n\nexport const movePlayer = position => {\n  let state = store.getState();\n  let action = {};\n  action.type = \"MOVE\";\n  action.board = updateBoard(state, position.col);\n  action.player = state.player === 1 ? 2 : 1;\n  return action;\n};\n\nexport const checkWinner = () => {\n  let state = store.getState();\n  let winner = hasWinner(state.board);\n  if (winner) {\n    return {\n      type: 'ENDGAME',\n      winner: winner\n    };\n  } else {\n    return {\n      type: 'DONOTHING'\n    };\n  }\n};\n\nconst updateBoard = (state, col) => {\n  var board = state.board;\n  for (let row = state.rows - 1; row >= 0; row--) {\n    if (!board[row][col]) {\n      board[row][col] = state.player;\n      break;\n    }\n  }\n  return board;\n}\n\nconst hasWinner = (board) => {\n  let winner = 0;\n  winner = checkHorizontal(board) || checkVertical(board) || checkDiagonal(board);\n  return winner;\n}\n\nconst checkDiagonal = (board) => {\n  let winner = checkHorizontal(getDiagonal(board));\n  winner = winner || checkHorizontal(getDiagonal(board, true));\n  return winner;\n}\n\nconst getDiagonal = (board, bottomToTop) => {\n  let cellsToWin = store.getState().cellsToWin;\n  let row = board.length;\n  let col = board[0].length;\n  let maxLength = Math.max(row, col);\n  let diagonal = [];\n\n  for (var i = 0; i <= 2 * (maxLength - 1); ++i) {\n    var d = [];\n\n    for (let j = row - 1; j >= 0; --j) {\n      let k = i - (bottomToTop ? row - j : j);\n      if (k >= 0 && k < col) {\n          d.push(board[j][k]);\n      }\n    }\n\n    if(d.length >= cellsToWin) {\n      diagonal.push(d);\n    }\n  }\n  return diagonal;\n}\n\nconst checkHorizontal = (board) => {\n  let winner = 0;\n  let cellsToWin = store.getState().cellsToWin;\n  let p1Winner = Array(cellsToWin).fill('1').join('');\n  let p2Winner = Array(cellsToWin).fill('2').join('');\n\n  board.some((r) => {\n    var row = r.join('');\n    if (row.match(p1Winner)) {\n      winner = 1;\n      return true;\n    } else if (row.match(p2Winner)) {\n      winner = 2;\n      return true;\n    }\n    return false;\n  });\n  return winner;\n}\n\nconst checkVertical = (board) => {\n  let winner = 0;\n  let boardT = board.map((col, idx) => board.map(row => row[idx]));\n  winner = checkHorizontal(boardT);\n  return winner;\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport { movePlayer, checkWinner } from '../actions/GameActions'\n\nexport class Cell extends Component {\n  handleClick = (args) => {\n    if (!this.props.winner) {\n      this.props.move(args);\n    }\n  };\n\n  render() {\n    return (\n      <td className={this.props.player === 1 ? 'board-td p1-td' : 'board-td p2-td'}>\n        <div \n          className={this.props.value === 1 ? 'player1' : \n                    this.props.value === 2 ? 'player2' : 'init'}\n          onClick={this.handleClick.bind(this, {\n            row: this.props.row, \n            col: this.props.col\n          })}>\n        </div>\n      </td>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    move: pos => {\n      dispatch(movePlayer(pos));\n      dispatch(checkWinner());\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Cell from './Cell';\n\nexport class Row extends Component {\n  render() {\n    return (\n      <tr>\n          {this.props.row.map((val, idx) => <Cell key={idx} value={val} row={this.props.rowCount} col={idx} />)}\n      </tr>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps)(Row);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Row from './Row';\nimport { initialize } from '../actions/GameActions';\n\nexport class Board extends Component {\n  initializeBoard() {\n    this.props.init();\n  }\n\n  render() {\n    return (<div>\n        <table className='board'>\n          <tbody>\n            {this.props.board.map((row, idx) => <Row key={idx} row={row} rowCount={idx} />)}\n          </tbody>            \n        </table>\n      </div>);\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    init: () => {\n      dispatch(initialize())\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Board from './Board';\nimport {initialize} from '../actions/GameActions';\n\nexport class Game extends Component {\n  initializeBoard() {\n    this.props.init();\n  }\n  render() {\n    return (\n      <div>\n        <button className='btn' onClick={this.initializeBoard.bind(this)}>New Game</button>\n        {this.props.board.length > 0? \n          <div>\n            {this.props.winner ? \n              <h2>Game Over! Player {this.props.winner} wins!</h2> :\n              <h2>Player {this.props.player}</h2>}\n            <Board />\n          </div> : null}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    init: () => {\n      dispatch(initialize())\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, {Component} from 'react';\n\nimport Game from './components/Game';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <div>\n          <h1 className='title'>Connect 4</h1>\n          <p>A classic game created using ReactJS<br/>\n          First player to connect 4 wins</p>\n        </div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}