{"version":3,"sources":["reducers/GameReducer.js","store.js","actions/GameActions.js","components/Circle.js","components/Row.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["initialState","board","rows","cols","player","GameReducer","state","arguments","length","undefined","action","type","i","col","Array","fill","push","initBoard","Object","assign","winner","store","createStore","initialize","movePlayer","position","getState","updateBoard","checkWinner","hasWinner","row","checkHorizontal","checkVertical","checkDiagonal","some","r","join","match","boardT","map","idx","Circle","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","_args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleClick","args","props","move","inherits","createClass","key","value","react_default","a","createElement","className","onClick","bind","Component","connect","dispatch","pos","Row","val","components_Circle","rowCount","Board","init","components_Row","Game","components_Board","App","components_Game","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c920f9d5.chunk.js","sourcesContent":["const initialState = {\n  board: [],\n  rows: 6,\n  cols: 7,\n  player: 1\n};\n\nconst GameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INIT':\n      let board = initBoard(state.rows, state.cols);\n      return Object.assign({}, state, {\n        board: board\n      });\n    case 'MOVE':\n      return Object.assign({}, state, {\n        player: action.player,\n        board: action.board\n      });\n    case 'ENDGAME':\n      return Object.assign({}, state, {\n        winner: action.winner\n      });\n    default:\n      return state;\n  }\n};\nexport default GameReducer;\n\nexport function initBoard(rows, cols) {\n  let board = [];\n  for (let i = 0; i < rows; i++) {\n    let col = Array(cols).fill(0);\n    board.push(col);\n  }\n  return board;\n}","import { createStore } from \"redux\";\nimport GameReducer from \"./reducers/GameReducer\";\n\nconst store = createStore(GameReducer);\n\nexport default store;","import store from '../store';\nimport { WSASERVICE_NOT_FOUND } from 'constants';\n\nexport const initialize = () => {\n  return {\n    type: \"INIT\"\n  };\n};\n\nexport const movePlayer = position => {\n  let state = store.getState();\n  let action = {};\n  action.type = \"MOVE\";\n  action.board = updateBoard(state, position.col);\n  action.player = state.player === 1 ? 2 : 1;\n  return action;\n};\n\nexport const checkWinner = () => {\n  let state = store.getState();\n  let winner = hasWinner(state.board);\n  if (winner) {\n    return {\n      type: 'ENDGAME',\n      winner: winner\n    };\n  } else {\n    return {\n      type: 'DONOTHING'\n    };\n  }\n};\n\nconst updateBoard = (state, col) => {\n  var board = state.board;\n  for (let row = state.rows - 1; row >= 0; row--) {\n    if (!board[row][col]) {\n      board[row][col] = state.player;\n      break;\n    }\n  }\n  // console.log(board);\n  return board;\n}\n\nconst hasWinner = (board) => {\n  let winner = 0;\n  winner = checkHorizontal(board) || checkVertical(board) || checkDiagonal(board);\n  return winner;\n}\n\nconst checkDiagonal = (board) => {\n  \n}\n\nconst checkHorizontal = (board) => {\n  var winner = 0;\n  board.some((r) => {\n    var row = r.join('')\n    if (row.match(/1111/)) {\n      winner = 1;\n      return true;\n    } else if (row.match(/2222/)) {\n      winner = 2;\n      return true;\n    }\n    return false;\n  });\n  return winner;\n}\n\nconst checkVertical = (board) => {\n  var winner = 0;\n  var boardT = board.map((col, idx) => board.map(row => row[idx]));\n  winner = checkHorizontal(boardT);\n  return winner;\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport { movePlayer, checkWinner } from '../actions/GameActions'\n\nexport class Circle extends Component {\n  handleClick = (args) => {\n    this.props.move(args);\n  };\n\n  render() {\n    return (\n      <td>\n        {/* TODO: check for color */}\n        <div \n          className={this.props.value === 1 ? 'player1' : \n          this.props.value === 2 ? 'player2' : 'init'}\n          onClick={this.handleClick.bind(this, {\n            row: this.props.row, \n            col: this.props.col\n          })}>\n        </div>\n      </td>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    move: pos => {\n      dispatch(movePlayer(pos));\n      dispatch(checkWinner());\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Circle);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Circle from './Circle';\n\nexport class Row extends Component {\n  render() {\n    return (\n      <tr>\n          {this.props.row.map((val, idx) => <Circle key={idx} value={val} row={this.props.rowCount} col={idx} />)}\n      </tr>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps)(Row);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Row from './Row';\nimport { initialize } from '../actions/GameActions';\n\nexport class Board extends Component {\n  componentDidMount() {\n    this.props.init();\n  }\n\n  render() {\n    return (\n      <div>\n          <table>\n            <tbody>\n              {this.props.board.map((row, idx) => <Row key={idx} row={row} rowCount={idx} />)}\n            </tbody>            \n          </table>\n      </div>\n    );\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    init: () => {\n      dispatch(initialize())\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Board from './Board'\n\nexport class Game extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.winner ? <h3>Player {this.props.winner} wins!</h3> : \n          <div className='status'>Player {this.props.player} turn!</div>}\n        \n        {/* TODO: add color */}\n        <Board />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state;\n}\nexport default connect(mapStateToProps)(Game);\n","import React, {Component} from 'react';\n\nimport Game from './components/Game';\n// import Menu from './components/Menu';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <div className='title'>Connect 4</div>\n        {/* <Menu /> */}\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}